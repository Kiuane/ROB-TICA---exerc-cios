// QUESTIONÁRIO PRÁTICO DE C++
// Autor: Kiuane (com ajuda do ChatGPT)
// Descrição: Resolução das 30 questões com explicações

#include <iostream>
#include <string>
using namespace std;

// BLOCO 1 – VARIÁVEIS, CONSTANTES E TIPOS DE DADOS

int exercicio1() {
    int inteiro = 10;
    float flutuante = 3.14f;
    double preciso = 2.71828;
    char letra = 'A';
    bool ligado = true;
    cout << inteiro << " " << flutuante << " " << preciso << " " << letra << " " << ligado << endl;
    return 0;
}

int exercicio2() {
    int a, b;
    cin >> a >> b;
    cout << a + b << endl;
    cout << a - b << endl;
    cout << a * b << endl;
    cout << a / b << endl;
    return 0;
}

int exercicio3() {
    const float PI = 3.14;
    float raio;
    cin >> raio;
    cout << "Area: " << PI * raio * raio << endl;
    return 0;
}

int exercicio4() {
    int i = 5;
    float f = 5.5;
    double d = 5.55555;
    cout << i / 2 << " " << f / 2 << " " << d / 2 << endl;
    return 0;
}

int exercicio5() {
    string nome;
    int idade;
    cin >> nome >> idade;
    cout << "Olá, " << nome << ". Você tem " << idade << " anos." << endl;
    return 0;
}

// BLOCO 2 – FUNÇÕES
int exercício6()
int soma(int a, int b) {
    return a + b;
}
int exercício7()
bool ehPar(int n) {
    return n % 2 == 0;
}
int exercício8()
void mostrarMensagem() {
    cout << "Bem-vindo ao programa!" << endl;
}
int exrcício9()
int quadrado(int n) {
    return n * n;
}
int exercício10()
float maior(float a, float b) {
    return (a > b) ? a : b;
}

// BLOCO 3 – PONTEIROS

int exercicio11() {
    int x = 10;
    int* p = &x;
    cout << *p << " - Endereco: " << p << endl;
    return 0;
}
int exercício12()
void dobrar(int* p) {
    *p *= 2;
}
int exercIcio13()
void trocar(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
int exercício14()
void mostrarVetor(int* v, int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        cout << v[i] << " ";
    }
    cout << endl;
}
int exercício15()
void aprovado(float* nota) {
    if (*nota >= 7)
        cout << "Aprovado" << endl;
    else
        cout << "Reprovado" << endl;
}

// BLOCO 4 – PARÂMETROS E ARGUMENTOS
int exercício16()
void trocarRef(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}
int exercício17()
void alterarValores(int valor, int &ref) {
    valor = 10;
    ref = 20;
}
int exercício18()
void incrementar(int* p) {
    (*p)++;
}
int exercício19()
float media(float a, float b, float c) {
    return (a + b + c) / 3;
}
int exercício20()
void situacao(string nome, float nota) {
    cout << nome << (nota >= 7 ? " está aprovado" : " está reprovado") << endl;
}

// BLOCO 5 – COMBINAÇÃO DE CONCEITOS
int exercício21()
float calcularAreaRetangulo(float base, float altura) {
    return base * altura;
}

int exercicio22() {
    const float BONUS = 500.0;
    float salario;
    cin >> salario;
    cout << "Salario final: " << salario + BONUS << endl;
    return 0;
}
int exercício23()
// Simulação do funcoes.h omitida (precisa de dois arquivos)

float calcularMediaVetor(int* v, int tamanho) {
    int soma = 0;
    for (int i = 0; i < tamanho; i++) soma += v[i];
    return soma / (float)tamanho;
}
int exercício24()
void inverterSinal(int &valor) {
    valor = -valor;
}

// BLOCO 6 – EXERCÍCIOS APLICADOS
int exercício25()
void menu() {
    int op, a, b;
    cin >> op >> a >> b;
    if (op == 1) cout << soma(a, b);
    else if (op == 2) cout << a - b;
    else if (op == 3) cout << a * b;
}
int exercício26()
float saldo = 1000;

void saque(float valor) {
    if (valor <= saldo) saldo -= valor;
}
int exercício27()
void deposito(float valor) {
    saldo += valor;
}
int exercício28()
void consulta() {
    cout << saldo << endl;
}
int exercício29()
struct Pessoa {
    string nome;
    int idade;
    float altura;
};
int exercício30()
void mostrarPessoa(Pessoa* p) {
    cout << p->nome << " " << p->idade << " " << p->altura << endl;
}

void trocarValores(void* a, void* b, string tipo) {
    if (tipo == "int") {
        int* x = (int*)a;
        int* y = (int*)b;
        int temp = *x;
        *x = *y;
        *y = temp;
    } else if (tipo == "float") {
        float* x = (float*)a;
        float* y = (float*)b;
        float temp = *x;
        *x = *y;
        *y = temp;
    }
}
int main() {
    // Chamar aqui a função que quiser testar
    return 0;
}

